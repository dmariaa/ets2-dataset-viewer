#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs');
var path = require('path');
var debug = require('debug')('server:server');

process.env.DATA_DIR = process.env.DATA_DIR || path.join(process.cwd(), '../data');
process.env.STATIC_DIR = process.env.STATIC_DIR ||
  (process.env.NODE_ENV==='production' ?
    path.join(process.cwd(), '/public') : path.join(process.cwd(), '../client/build'));

/** Require app */
var app = require('../src/app');

/**
 * Choose between http and https
 */
var http = require('http');
var http_options = {};

if(process.env.NODE_ENV==='production' || process.env.PROTOCOL==='https') {
  var http = require('https');
  var http_options = {
    cert: fs.readFileSync(process.env.CERT),
    key: fs.readFileSync(process.env.KEY),
    requestCert: false
  };
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(http_options, app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
